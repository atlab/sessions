% Database update script for KalmanParams patch
% AE 2015-09-01


%% Ensure entries in detect.Methods are sane
tuples = struct('detect_method_num', {5 6 7}, 'detect_method_name', {'SiliconProbesV2', 'MultiChannelProbes', 'UtahV2'});
inserti(detect.Methods, tuples)
assert(count(detect.Methods & tuples) == numel(tuples), 'detect.Methods don''t match expected names!')


%% Create database tables
sort.KalmanParams
sort.KalmanDefault
sort.KalmanPractice


%% Insert parameter sets
insert(sort.KalmanParams, struct('param_id', 0, 'feature_name', '', ...
    'feature_num', 0, 'drift_rate', 0, 'cluster_cost', 0, ...
    'tolerance', 0, 'df', 0, 'cov_ridge', 0, 'dt_mu', 0, ...
    'comment', 'unknown'))
insert(sort.KalmanParams, struct('param_id', 1, 'feature_name', 'PCA', ...
    'feature_num', 3, 'drift_rate', 20 / 3600 / 1000, 'cluster_cost', 0.0001, ...
    'tolerance', 5e-4, 'df', 2, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Parameters used for Andy'))
insert(sort.KalmanParams, struct('param_id', 2, 'feature_name', 'PCA', ...
    'feature_num', 3, 'drift_rate', 20 / 3600 / 1000, 'cluster_cost', 0.0025, ...
    'tolerance', 5e-4, 'df', 2, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Default tetrode parameters before 2013-03-11'))
insert(sort.KalmanParams, struct('param_id', 3, 'feature_name', 'PCA', ...
    'feature_num', 1, 'drift_rate', 100 / 3600 / 1000, 'cluster_cost', 0.002, ...
    'tolerance', 5e-4, 'df', 5, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Tetrodes with first PC only'))
insert(sort.KalmanParams, struct('param_id', 4, 'feature_name', 'PCA', ...
    'feature_num', 8, 'drift_rate', 300 / 3600 / 1000, 'cluster_cost', 0.0038, ...
    'tolerance', 5e-5, 'df', 8, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Utah arrays'))
insert(sort.KalmanParams, struct('param_id', 5, 'feature_name', 'PCA', ...
    'feature_num', 8, 'drift_rate', 300 / 3600 / 1000, 'cluster_cost', 0.0038, ...
    'tolerance', 5e-5, 'df', 8, 'cov_ridge', 1.5, 'dt_mu', 100000, ...
    'comment', 'Utah arrays'))
insert(sort.KalmanParams, struct('param_id', 6, 'feature_name', 'PCA', ...
    'feature_num', 1, 'drift_rate', 400 / 3600 / 1000, 'cluster_cost', 0.002, ...
    'tolerance', 5e-4, 'df', 5, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Tetrodes with first PC only'))
insert(sort.KalmanParams, struct('param_id', 7, 'feature_name', 'PCA', ...
    'feature_num', 3, 'drift_rate', 400 / 3600 / 1000, 'cluster_cost', 0.002, ...
    'tolerance', 5e-4, 'df', 5, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Default tetrode params since 2013-03-11'))
insert(sort.KalmanParams, struct('param_id', 8, 'feature_name', 'PCA', ...
    'feature_num', 3, 'drift_rate', 400 / 3600 / 1000, 'cluster_cost', 0.0023, ...
    'tolerance', 5e-4, 'df', 5, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Tetrode params mainly used by Mani after 2013-03-20'))
insert(sort.KalmanParams, struct('param_id', 9, 'feature_name', 'PCA', ...
    'feature_num', 3, 'drift_rate', 400 / 3600 / 1000, 'cluster_cost', 0.0025, ...
    'tolerance', 5e-4, 'df', 2, 'cov_ridge', 1.5, 'dt_mu', 60000, ...
    'comment', 'Tetrode parameters used for Dino & Hulk'))

insert(sort.KalmanDefault, struct('detect_method_num', 1, 'param_id', 5))
insert(sort.KalmanDefault, struct('detect_method_num', 2, 'param_id', 7))
insert(sort.KalmanDefault, struct('detect_method_num', 3, 'param_id', 4))
insert(sort.KalmanDefault, struct('detect_method_num', 4, 'param_id', 7))
insert(sort.KalmanDefault, struct('detect_method_num', 6, 'param_id', 7)) % Multi-channel probes
insert(sort.KalmanDefault, struct('detect_method_num', 7, 'param_id', 5)) % Utah arrays


%% Update sort.KalmanAutomatic table
addAttribute(sort.KalmanAutomatic, 'param_id : int unsigned # unique identifier for parameter set', 'AFTER electrode_num')
addForeignKey(sort.KalmanAutomatic, sort.KalmanParams)


%% Update param_ids in sort.KalmanAutomatic
[pid, driftRate, clusterCost, df, dtMu, f] = fetchn(sort.KalmanParams & 'param_id > 0', ...
    'param_id', 'drift_rate', 'cluster_cost', 'df', 'dt_mu', 'feature_num', 'ORDER BY param_id ASC');

[data, keys] = fetch(sort.KalmanAutomatic & 'param_id = 0', '*');
p = arrayfun(@(d) d.model.params, data, 'uni', false);
p = [p{:}];
F = arrayfun(@(d) size(d.model.mu, 1), data);
F(F == 18) = 3; % multi-channel probes with 6 channels per group
F(F == 12) = 3; % tetrodes
F(F == 4) = 1;  % tetrodes
for i = 1 : numel(keys)
    ndx = driftRate == p(i).DriftRate & clusterCost == p(i).ClusterCost ...
        & df == p(i).Df & dtMu == p(i).DTmu & f == F(i);
    assert(sum(ndx) == 1, 'No matching parameter set found!')
    update(sort.KalmanAutomatic & keys(i), 'param_id', pid(ndx))
end

